# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ns3DRudder')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ns3DRudder')
    _ns3DRudder = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ns3DRudder', [dirname(__file__)])
        except ImportError:
            import _ns3DRudder
            return _ns3DRudder
        if fp is not None:
            try:
                _mod = imp.load_module('_ns3DRudder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ns3DRudder = swig_import_helper()
    del swig_import_helper
else:
    import _ns3DRudder
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

_3DRUDDER_SDK_MAX_DEVICE = _ns3DRudder._3DRUDDER_SDK_MAX_DEVICE
_3DRUDDER_SDK_VERSION = _ns3DRudder._3DRUDDER_SDK_VERSION
Success = _ns3DRudder.Success
NotConnected = _ns3DRudder.NotConnected
Fail = _ns3DRudder.Fail
IncorrectCommand = _ns3DRudder.IncorrectCommand
Timeout = _ns3DRudder.Timeout
WrongSignature = _ns3DRudder.WrongSignature
NotReady = _ns3DRudder.NotReady
Other = _ns3DRudder.Other
class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    NoStatus = _ns3DRudder.State_NoStatus
    NoFootStayStill = _ns3DRudder.State_NoFootStayStill
    Initialisation = _ns3DRudder.State_Initialisation
    PutYourFeet = _ns3DRudder.State_PutYourFeet
    PutSecondFoot = _ns3DRudder.State_PutSecondFoot
    StayStill = _ns3DRudder.State_StayStill
    InUse = _ns3DRudder.State_InUse
    ExtendedMode = _ns3DRudder.State_ExtendedMode
    End = _ns3DRudder.State_End

    def __init__(self):
        this = _ns3DRudder.new_State()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["aX"] = _ns3DRudder.State_aX_set
    __swig_getmethods__["aX"] = _ns3DRudder.State_aX_get
    if _newclass:
        aX = _swig_property(_ns3DRudder.State_aX_get, _ns3DRudder.State_aX_set)
    __swig_setmethods__["aY"] = _ns3DRudder.State_aY_set
    __swig_getmethods__["aY"] = _ns3DRudder.State_aY_get
    if _newclass:
        aY = _swig_property(_ns3DRudder.State_aY_get, _ns3DRudder.State_aY_set)
    __swig_setmethods__["aZ"] = _ns3DRudder.State_aZ_set
    __swig_getmethods__["aZ"] = _ns3DRudder.State_aZ_get
    if _newclass:
        aZ = _swig_property(_ns3DRudder.State_aZ_get, _ns3DRudder.State_aZ_set)
    __swig_setmethods__["rZ"] = _ns3DRudder.State_rZ_set
    __swig_getmethods__["rZ"] = _ns3DRudder.State_rZ_get
    if _newclass:
        rZ = _swig_property(_ns3DRudder.State_rZ_get, _ns3DRudder.State_rZ_set)
    __swig_setmethods__["status"] = _ns3DRudder.State_status_set
    __swig_getmethods__["status"] = _ns3DRudder.State_status_get
    if _newclass:
        status = _swig_property(_ns3DRudder.State_status_get, _ns3DRudder.State_status_set)
    __swig_setmethods__["s0"] = _ns3DRudder.State_s0_set
    __swig_getmethods__["s0"] = _ns3DRudder.State_s0_get
    if _newclass:
        s0 = _swig_property(_ns3DRudder.State_s0_get, _ns3DRudder.State_s0_set)
    __swig_setmethods__["s1"] = _ns3DRudder.State_s1_set
    __swig_getmethods__["s1"] = _ns3DRudder.State_s1_get
    if _newclass:
        s1 = _swig_property(_ns3DRudder.State_s1_get, _ns3DRudder.State_s1_set)
    __swig_setmethods__["s2"] = _ns3DRudder.State_s2_set
    __swig_getmethods__["s2"] = _ns3DRudder.State_s2_get
    if _newclass:
        s2 = _swig_property(_ns3DRudder.State_s2_get, _ns3DRudder.State_s2_set)
    __swig_setmethods__["s3"] = _ns3DRudder.State_s3_set
    __swig_getmethods__["s3"] = _ns3DRudder.State_s3_get
    if _newclass:
        s3 = _swig_property(_ns3DRudder.State_s3_get, _ns3DRudder.State_s3_set)
    __swig_setmethods__["s4"] = _ns3DRudder.State_s4_set
    __swig_getmethods__["s4"] = _ns3DRudder.State_s4_get
    if _newclass:
        s4 = _swig_property(_ns3DRudder.State_s4_get, _ns3DRudder.State_s4_set)
    __swig_setmethods__["s5"] = _ns3DRudder.State_s5_set
    __swig_getmethods__["s5"] = _ns3DRudder.State_s5_get
    if _newclass:
        s5 = _swig_property(_ns3DRudder.State_s5_get, _ns3DRudder.State_s5_set)

    def GetXAxis(self):
        return _ns3DRudder.State_GetXAxis(self)

    def GetYAxis(self):
        return _ns3DRudder.State_GetYAxis(self)

    def GetZAxis(self):
        return _ns3DRudder.State_GetZAxis(self)

    def GetZRotation(self):
        return _ns3DRudder.State_GetZRotation(self)

    def GetStatus(self):
        return _ns3DRudder.State_GetStatus(self)

    def GetSensor(self, nIndex):
        return _ns3DRudder.State_GetSensor(self, nIndex)
    __swig_destroy__ = _ns3DRudder.delete_State
    __del__ = lambda self: None
State_swigregister = _ns3DRudder.State_swigregister
State_swigregister(State)

class CSdk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSdk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSdk, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _ns3DRudder.new_CSdk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSDKVersion(self):
        return _ns3DRudder.CSdk_GetSDKVersion(self)

    def GetNumberOfConnectedDevice(self):
        return _ns3DRudder.CSdk_GetNumberOfConnectedDevice(self)

    def IsDeviceConnected(self, nPortNumber):
        return _ns3DRudder.CSdk_IsDeviceConnected(self, nPortNumber)

    def GetFirmwareVersion(self, nPortNumber):
        return _ns3DRudder.CSdk_GetFirmwareVersion(self, nPortNumber)

    def PlaySnd(self, nPortNumber, nFrequency, nDuration):
        return _ns3DRudder.CSdk_PlaySnd(self, nPortNumber, nFrequency, nDuration)

    def Get3DRudderState(self, nPortNumber, pState):
        return _ns3DRudder.CSdk_Get3DRudderState(self, nPortNumber, pState)
    __swig_destroy__ = _ns3DRudder.delete_CSdk
    __del__ = lambda self: None
CSdk_swigregister = _ns3DRudder.CSdk_swigregister
CSdk_swigregister(CSdk)


def GetSDK():
    return _ns3DRudder.GetSDK()
GetSDK = _ns3DRudder.GetSDK
# This file is compatible with both classic and new-style classes.


